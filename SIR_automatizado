import matplotlib.pyplot as plt
from numba import njit
import pandas as pd
import numpy as np
import random
import time
import math

tiempo_inicial = time.time()

# Función del modelo SIR con control no lineal
def SIR_control(S, I, R, u):
    beta_eff = delta_beta * (1 - u)
    dS = -beta_eff * S * I
    dI = beta_eff * S * I - delta_gamma * I
    dR = delta_gamma * I
    return dS, dI, dR

# Funciones de coestados
def coestados(S, I, R, lambdaS, lambdaI, lambdaR, u):
    beta_eff = delta_beta * (1 - u)
    d_lambdaS = beta_eff * I * (lambdaS - lambdaI)
    d_lambdaI = -C_I + beta_eff * S * (lambdaS - lambdaI) + delta_gamma * (lambdaI - lambdaR)
    d_lambdaR = 0.0
    return d_lambdaS, d_lambdaI, d_lambdaR

# Condición de optimalidad
@njit
def optimalidad(S, I, lambdaS, lambdaI, tol=1e-15):
  # Polinomio de optimalidad
  A = delta_beta * S * I * (lambdaS - lambdaI)
  p = lambda u: -u**3 + 3*u**2 + ((2 * C_u)/A - 3) * u + 1
  dp = lambda u: -3*u**2 + 6*u + (2 * C_u)/A - 3

  if A >= 0:
    return 0.0
  else:
    u = 0.5
    for _ in range(100):
      f = p(u)
      df = dp(u)
      u_nueva = u - f/df
      if abs(u_nueva - u) < tol:
        break
      u = u_nueva
  return u

# Parámetros del modelo
C_I = 5.0
C_u = 1.0
C_LI = 20

T_total = 60
dt = 0.5
N = int(T_total / dt)

# Inicio bucle
N_S = 100 # Número de simulaciones
rows = []
sistem = []
for _ in range(N_S): 
    p = random.random()
    if p < 0.7:
        delta_S0 = random.uniform(0.9, 0.99)
    elif p < 0.95:
        delta_S0 = random.uniform(0.5, 0.9)
    else:
        delta_S0 = random.uniform(0.1, 0.5)
    delta_I0 = 1 - delta_S0
    delta_R0 = 0
    delta_beta = random.uniform(0.1, 2.0)
    delta_gamma = random.uniform(0.05, 0.5)
    inicio_control = random.randint(0, 7)
    
    # Parámetros del horizonte errante
    T_horizonte = 7.0
    N_H = int(T_horizonte / dt)

    # Iniciar condiciones generales
    S, I, R, u = [delta_S0], [delta_I0], [delta_R0], []
    I_entrada, u_entrada, T_entrada = [], [], []
    I_pronostico, u_pronostico, T_pronostico = [], [], []

    for t_step in range(N):
      tiempo_actual = t_step * dt
      S_ini, I_ini, R_ini = S[-1], I[-1], R[-1]

      if tiempo_actual >= inicio_control: # Condicion para aplicar el control en un intervalo dado
        S_h = np.zeros(N_H)
        I_h = np.zeros(N_H)
        R_h = np.zeros(N_H)
        u_h = np.ones(N_H)*0.5
        lambdaS = np.zeros(N_H)
        lambdaI = np.zeros(N_H)
        lambdaR = np.zeros(N_H)

        lambdaS[-1], lambdaI[-1], lambdaR[-1] = 0.0, C_LI, 0.0
        S_h[0], I_h[0], R_h[0] = S_ini, I_ini, R_ini # Inicia desde la ultima condicion global añadida

        for _ in range(100):
          for i in range(N_H - 1):
            dS, dI, dR = SIR_control(S_h[i], I_h[i], R_h[i], u_h[i])
            S_h[i+1] = S_h[i] + dt * dS
            I_h[i+1] = I_h[i] + dt * dI
            R_h[i+1] = R_h[i] + dt * dR

          for i in reversed(range(N_H - 1)):
            d_lambdaS, d_lambdaI, d_lambdaR = coestados(S_h[i], I_h[i], R_h[i], lambdaS[i+1], lambdaI[i+1], lambdaR[i+1], u_h[i])
            lambdaS[i] = lambdaS[i+1] + dt * d_lambdaS
            lambdaI[i] = lambdaI[i+1] + dt * d_lambdaI
            lambdaR[i] = lambdaR[i+1] + dt * d_lambdaR

          for i in range(N_H):
            u_h[i] = optimalidad(S_h[i], I_h[i], lambdaS[i], lambdaI[i])

        u_aplicado = u_h[0]
      else:
        u_aplicado = 0

      # Actualización del sistema global
      dS, dI, dR = SIR_control(S_ini, I_ini, R_ini, u_aplicado) # Es funcion que aplica las condiciones dadas y actualiza el sistema general
      S_next = S_ini + dt * dS
      I_next = I_ini + dt * dI
      R_next = R_ini + dt * dR

      S.append(S_next)
      I.append(I_next)
      R.append(R_next)
      u.append(u_aplicado)
        
      # Condiciones para guardar la data
      if (inicio_control <= tiempo_actual < inicio_control+8): # Guardar la dinamica de la semana 1
          u_entrada.append(u_aplicado)
          I_entrada.append(I_ini)
          T_entrada.append(tiempo_actual)
      if (inicio_control+8 <= tiempo_actual < inicio_control + 16): # Guardar la dinámica de la semana 2
          u_pronostico.append(u_aplicado)
          I_pronostico.append(I_ini)
          T_pronostico.append(tiempo_actual)
          
      dia_pico = np.argmax(I) * dt
      if (inicio_control <= dia_pico - 1):
          estado = 'pre-pico'
      if (dia_pico - 1 <= inicio_control < dia_pico + 1):
          estado = 'durante_pico'
      if (inicio_control >= dia_pico + 1):
          estado = 'post-pico'
          

    rows.append({
        'beta': delta_beta,
        'gamma': delta_gamma,
        'S0': delta_S0,
        'I0': delta_I0,
        'Estado_pico': estado,
        'T_entrada': T_entrada,
        'I_entrada': I_entrada,
        'u_entrada': u_entrada,
        'T_pronostico': T_pronostico ,
        'I_pronostico': I_pronostico,
        'u_pronostico': u_pronostico
    })

    sistem.append({
        'S': S,
        'I': I,
        'R': R,
        'u': u
    })

    
# Convertimos la lista de diccionarios en un DataFrame
df = pd.DataFrame(rows)
df_sistem = pd.DataFrame(sistem)

tiempo_final = time.time()
print(f'Tiempo de ejecución: {tiempo_final - tiempo_inicial} segundos')
print(f'Tiempo en minutos: {(tiempo_final - tiempo_inicial)/60} minutos')
print()

# Guardar DataFrame
#df.to_csv('simulaciones_SIR_V3_20000.csv', index = False, encoding = 'utf-8')
df
